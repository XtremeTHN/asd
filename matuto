#!/usr/bin/env python3
import subprocess
import json
import sys
import io
import os

BOLD = "\033[1m"
RESTORE = "\033[0m"

UNDERLINED = "\033[4m"

def materialU_gen_json(in_file) -> dict[str, dict[str, dict[str,str]]]:
    return json.loads(subprocess.check_output(args=["matugen", "image", in_file, "--json", "hex"]))

def error(msg):
    print(BOLD, UNDERLINED, "Error:", RESTORE, f" {msg}", sep="")

def print_help():
    print(BOLD, UNDERLINED, "Usage", RESTORE, ": matuto TYPE IMAGE [OUTPUT_FILE]\n", sep="")

    print("A tool that generates files from matugen output\n")
    
    print(BOLD, UNDERLINED, "Positional arguments:", RESTORE, sep="")
    print("\tTYPE:              The language of the output file")
    print("\tIMAGE:             The image")
    print("\tOUTPUT_FILE:       The output file")
    
    

class Arguments:
    css_flag: bool
    gtk_css_flag: bool
    scss_flag: bool
    
    in_file_required: str
    out_file: io.TextIOWrapper | None
    
    def __init__(self):
        self.css_flag = False 
        self.gtk_css_flag = False
        self.scss_flag = False
        
        self.in_file_required = None
        self.out_file = sys.stdout

    def parse_args(self, argv: list[str] = sys.argv):
        for index, arg in enumerate(argv):
            if arg in ["-h", "--help"]:
                print_help()
                break
            
            if index == 1:
                match arg:
                    case "css":
                        self.css_flag = True
                    case "gtk-css":
                        self.gtk_css_flag = True
                    case "scss":
                        self.scss_flag = True
            if index == 2:
                if os.path.exists(arg) is True and os.path.isfile(arg) is True:
                    self.in_file_required = arg
                else:
                    error("Image file does not exist or it is not a file")
                    sys.exit(1)
                        
            if index == 3:
                if os.path.exists(arg) is False:
                    self.out_file = open(arg, "w")
                else:
                    error("Output file exists, pass --overwritte to the args if you wanna continue")
                    sys.exit(2)
        
        if not self.css_flag \
            and not self.gtk_css_flag \
            and not self.scss_flag:
                error("Choose one type")
                sys.exit(3)
                    
        if self.in_file_required is None:
            error("No image provided")
            sys.exit(4)
            
def parse_matugen(in_file, format_str: str):
    out = materialU_gen_json(in_file)
    return ["/*Generated by mutagen and transpiled by materialU-toScss.py*/\n"] + \
        [format_str.format(k,v) for k,v in out["colors"]["dark"].items()]

def print_result(args, result):
    args.out_file.write("\n".join(result))
    args.out_file.flush()
    args.out_file.close()
    
    sys.exit(0)
    
if __name__ == "__main__":
    args = Arguments()
    args.parse_args()
    
    if args.scss_flag is True:
        scss = parse_matugen(args.in_file_required, "${}: {};")

        print_result(args, scss)
        
    if args.css_flag is True:
        css = parse_matugen(args.in_file_required, "\t--{}: {};")
        css.insert(1, ":root {")
        css.append("}")
        
        print_result(args, css)
        
    
    if args.gtk_css_flag is True:
        gtk_css = parse_matugen(args.in_file_required, "@define-color {} {};")
        
        print_result(args, gtk_css)
